import { OnDestroy, OnInit, OnChanges, SimpleChange, ChangeDetectorRef, ElementRef } from '@angular/core';
import { NgxSpinnerService } from './ngx-spinner.service';
import { Subject } from 'rxjs';
import { Size, NgxSpinner } from './ngx-spinner.enum';
import * as ɵngcc0 from '@angular/core';
export declare class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {
    private spinnerService;
    private changeDetector;
    private elementRef;
    /**
     * To set backdrop color
     * Only supports RGBA color format
     * @memberof NgxSpinnerComponent
     */
    bdColor: string;
    /**
     * To set spinner size
     *
     * @memberof NgxSpinnerComponent
     */
    size: Size;
    /**
     * To set spinner color(DEFAULTS.SPINNER_COLOR)
     *
     * @memberof NgxSpinnerComponent
     */
    color: string;
    /**
     * To set type of spinner
     *
     * @memberof NgxSpinnerComponent
     */
    type: string;
    /**
     * To toggle fullscreen mode
     *
     * @memberof NgxSpinnerComponent
     */
    fullScreen: boolean;
    /**
     * Spinner name
     *
     * @memberof NgxSpinnerComponent
     */
    name: string;
    /**
     * z-index value
     *
     * @memberof NgxSpinnerComponent
     */
    zIndex: number;
    /**
     * Custom loader for spinner/loader
     *
     * @memberof NgxSpinnerComponent
     */
    loaderTemplate: string;
    /**
   * display loading text
   *
   * @memberof NgxSpinnerComponent
   */
    loadingText: string;
    /**
   * Custom loading text Template for spinner/loader
   *
   * @memberof NgxSpinnerComponent
   */
    loadingTextTemplate: string;
    /**
     * button Spinner.
     * https://getbootstrap.com/docs/4.4/components/spinners/#buttons
     *
     * @memberof NgxSpinnerComponent
     *
     */
    isButtonSpinner: boolean;
    /**
     * isButtonSpinner is true and when the spinner shown,the button disabled set to true
     *
     * @memberof NgxSpinnerComponent
     *
     */
    autoDisableButton: boolean;
    /**
     * Spinner Object
     *
     * @memberof NgxSpinnerComponent
     */
    spinner: NgxSpinner;
    /**
     * Show spinner
     *
     * @memberof NgxSpinnerComponent
    **/
    show: boolean;
    /**
     * Unsubscribe from spinner's observable
     *
     * @memberof NgxSpinnerComponent
    **/
    ngUnsubscribe: Subject<void>;
    /**
     * Creates an instance of NgxSpinnerComponent.
     *
     * @memberof NgxSpinnerComponent
     */
    constructor(spinnerService: NgxSpinnerService, changeDetector: ChangeDetectorRef, elementRef: ElementRef);
    /**
     * Initialization method
     *
     * @memberof NgxSpinnerComponent
     */
    ngOnInit(): void;
    /**
     * To set default ngx-spinner options
     *
     * @memberof NgxSpinnerComponent
     */
    setDefaultOptions: () => void;
    /**
     * On changes event for input variables
     *
     * @memberof NgxSpinnerComponent
     */
    ngOnChanges(changes: {
        [propKey: string]: SimpleChange;
    }): void;
    /**
     * To get class for spinner
     *
     * @memberof NgxSpinnerComponent
     */
    getClass(type: string, size: Size): string[];
    /**
     * Check if input variables have changed
     *
     * @memberof NgxSpinnerComponent
     */
    onInputChange(): void;
    /**
     * Component destroy event
     *
     * @memberof NgxSpinnerComponent
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxSpinnerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxSpinnerComponent, "ngx-bootstrap-spinner", never, { "isButtonSpinner": "isButtonSpinner"; "autoDisableButton": "autoDisableButton"; "bdColor": "bdColor"; "zIndex": "zIndex"; "color": "color"; "type": "type"; "size": "size"; "fullScreen": "fullScreen"; "name": "name"; "loaderTemplate": "loaderTemplate"; "loadingText": "loadingText"; "loadingTextTemplate": "loadingTextTemplate"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNwaW5uZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1zcGlubmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2UsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neFNwaW5uZXJTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtc3Bpbm5lci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBTaXplLCBOZ3hTcGlubmVyIH0gZnJvbSAnLi9uZ3gtc3Bpbm5lci5lbnVtJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4U3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gICAgcHJpdmF0ZSBzcGlubmVyU2VydmljZTtcclxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I7XHJcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XHJcbiAgICAvKipcclxuICAgICAqIFRvIHNldCBiYWNrZHJvcCBjb2xvclxyXG4gICAgICogT25seSBzdXBwb3J0cyBSR0JBIGNvbG9yIGZvcm1hdFxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgYmRDb2xvcjogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUbyBzZXQgc3Bpbm5lciBzaXplXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgc2l6ZTogU2l6ZTtcclxuICAgIC8qKlxyXG4gICAgICogVG8gc2V0IHNwaW5uZXIgY29sb3IoREVGQVVMVFMuU1BJTk5FUl9DT0xPUilcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUbyBzZXQgdHlwZSBvZiBzcGlubmVyXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUbyB0b2dnbGUgZnVsbHNjcmVlbiBtb2RlXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgZnVsbFNjcmVlbjogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogU3Bpbm5lciBuYW1lXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiB6LWluZGV4IHZhbHVlXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgekluZGV4OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEN1c3RvbSBsb2FkZXIgZm9yIHNwaW5uZXIvbG9hZGVyXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgbG9hZGVyVGVtcGxhdGU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAqIGRpc3BsYXkgbG9hZGluZyB0ZXh0XHJcbiAgICpcclxuICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAqL1xyXG4gICAgbG9hZGluZ1RleHQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAqIEN1c3RvbSBsb2FkaW5nIHRleHQgVGVtcGxhdGUgZm9yIHNwaW5uZXIvbG9hZGVyXHJcbiAgICpcclxuICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAqL1xyXG4gICAgbG9hZGluZ1RleHRUZW1wbGF0ZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBidXR0b24gU3Bpbm5lci5cclxuICAgICAqIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuNC9jb21wb25lbnRzL3NwaW5uZXJzLyNidXR0b25zXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGlzQnV0dG9uU3Bpbm5lcjogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogaXNCdXR0b25TcGlubmVyIGlzIHRydWUgYW5kIHdoZW4gdGhlIHNwaW5uZXIgc2hvd24sdGhlIGJ1dHRvbiBkaXNhYmxlZCBzZXQgdG8gdHJ1ZVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBhdXRvRGlzYWJsZUJ1dHRvbjogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogU3Bpbm5lciBPYmplY3RcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBzcGlubmVyOiBOZ3hTcGlubmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IHNwaW5uZXJcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAgKiovXHJcbiAgICBzaG93OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVbnN1YnNjcmliZSBmcm9tIHNwaW5uZXIncyBvYnNlcnZhYmxlXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICoqL1xyXG4gICAgbmdVbnN1YnNjcmliZTogU3ViamVjdDx2b2lkPjtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBOZ3hTcGlubmVyQ29tcG9uZW50LlxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNwaW5uZXJTZXJ2aWNlOiBOZ3hTcGlubmVyU2VydmljZSwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6YXRpb24gbWV0aG9kXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVG8gc2V0IGRlZmF1bHQgbmd4LXNwaW5uZXIgb3B0aW9uc1xyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHNldERlZmF1bHRPcHRpb25zOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBPbiBjaGFuZ2VzIGV2ZW50IGZvciBpbnB1dCB2YXJpYWJsZXNcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XHJcbiAgICAgICAgW3Byb3BLZXk6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUbyBnZXQgY2xhc3MgZm9yIHNwaW5uZXJcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBnZXRDbGFzcyh0eXBlOiBzdHJpbmcsIHNpemU6IFNpemUpOiBzdHJpbmdbXTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgaW5wdXQgdmFyaWFibGVzIGhhdmUgY2hhbmdlZFxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIG9uSW5wdXRDaGFuZ2UoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50IGRlc3Ryb3kgZXZlbnRcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==